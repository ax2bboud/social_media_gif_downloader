name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Optional: exclude combinations if needed for performance
          - os: macos-latest
            python-version: '3.8'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run tests
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          $env:PYTHONPATH="$PWD" ; pytest --cov=twitter_gif_downloader --cov-report=xml
        else
          PYTHONPATH=$PWD pytest --cov=twitter_gif_downloader --cov-report=xml
        fi

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Optional: exclude combinations if needed for performance
          - os: macos-latest
            python-version: '3.8'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Download FFmpeg
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
          unzip ffmpeg.zip
          mv ffmpeg-*-essentials_build/bin/ffmpeg.exe .
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install ffmpeg
          cp $(brew --prefix ffmpeg)/bin/ffmpeg .
        else
          sudo apt-get update && sudo apt-get install -y ffmpeg
          cp /usr/bin/ffmpeg .
        fi

    - name: Download yt-dlp
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o yt-dlp.exe
        else
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o yt-dlp
          chmod +x yt-dlp
        fi

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --windowed --icon=app_icon.ico --add-data "ffmpeg;." --add-data "yt-dlp;." twitter_gif_downloader.py

    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create artifact name
      id: artifact_name
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          ARCH="x64"
          EXT=".exe"
        elif [ "$RUNNER_OS" == "macOS" ]; then
          ARCH="x64"
          EXT=""
        else
          ARCH="x64"
          EXT=""
        fi
        ARTIFACT_NAME="twitter-downloader-${{ steps.get_version.outputs.version }}-${RUNNER_OS,,}-$ARCH$EXT"
        echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.artifact_name.outputs.name }}
        path: dist/twitter_gif_downloader${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Verify version consistency
      run: |
        PYPROJECT_VERSION=$(grep '^version =' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        if [ "$PYPROJECT_VERSION" != "$VERSION" ]; then
          echo "Version mismatch: tag=$VERSION, pyproject.toml=$PYPROJECT_VERSION"
          exit 1
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Generate release notes
      id: release_notes
      run: |
        # Generate release notes from commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          NOTES=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        else
          NOTES=$(git log --pretty=format:"- %s" --max-count=10)
        fi
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes in v${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Downloads" >> $GITHUB_OUTPUT
        echo "Download the appropriate executable for your platform from the assets below." >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        files: artifacts/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}