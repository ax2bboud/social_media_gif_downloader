name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
      shell: bash

    - name: Download FFmpeg
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
          unzip ffmpeg.zip
          mv ffmpeg-*-essentials_build/bin/ffmpeg.exe .
          mv ffmpeg-*-essentials_build/bin/ffprobe.exe .
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install ffmpeg
          cp $(brew --prefix ffmpeg)/bin/ffmpeg .
          cp $(brew --prefix ffmpeg)/bin/ffprobe .
        else
          sudo apt-get update && sudo apt-get install -y ffmpeg
          cp /usr/bin/ffmpeg .
          cp /usr/bin/ffprobe .
        fi
      shell: bash

    - name: Download yt-dlp
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o yt-dlp.exe
        else
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o yt-dlp
          chmod +x yt-dlp
        fi
      shell: bash

    - name: Set path separator
      id: path_separator
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "sep=;" >> $GITHUB_OUTPUT
        else
          echo "sep=:" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Build executable with PyInstaller
      run: |
        FFMPEG_FILENAME="ffmpeg"
        FFPROBE_FILENAME="ffprobe"
        YTDLP_FILENAME="yt-dlp"
        if [ "$RUNNER_OS" == "Windows" ]; then
          FFMPEG_FILENAME="ffmpeg.exe"
          FFPROBE_FILENAME="ffprobe.exe"
          YTDLP_FILENAME="yt-dlp.exe"
        fi
        pyinstaller --onefile --windowed --icon=app_icon.ico --add-data "$FFMPEG_FILENAME${{ steps.path_separator.outputs.sep }}." --add-data "$FFPROBE_FILENAME${{ steps.path_separator.outputs.sep }}." --add-data "$YTDLP_FILENAME${{ steps.path_separator.outputs.sep }}." --add-data "platforms.py${{ steps.path_separator.outputs.sep }}." social_media_gif_downloader.py
      shell: bash
      
    - name: Rename executable for artifact
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          mv dist/social_media_gif_downloader.exe "dist/social_media_gif_downloader-${{ matrix.os }}.exe"
        else
          mv dist/social_media_gif_downloader "dist/social_media_gif_downloader-${{ matrix.os }}"
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: social-media-gif-downloader-${{ matrix.os }}
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate release notes
      id: release_notes
      run: |
        # Generate release notes from commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          NOTES=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        else
          NOTES=$(git log --pretty=format:"- %s" --max-count=10)
        fi
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes in v${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Downloads" >> $GITHUB_OUTPUT
        echo "Download the appropriate executable for your platform from the assets below." >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        files: artifacts/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
